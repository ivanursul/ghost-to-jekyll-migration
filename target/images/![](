<!DOCTYPE html>
<html lang="en-GB" prefix="og: http://ogp.me/ns#">
	<head>
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<title>ivanursul</title>
		<meta name="title" content="Ivan Ursul Lab. Research & development" >
		<meta name="description" content="Seasoned software engineer. Prefer Java. A true fan of CI/CD. Always willing to automate everything. Opensource commiter. Blogger.">
		<meta name="author" content="Ivan Ursul">
                <link rel="stylesheet" type='text/css' href="/assets/css/main.min.css?v=d6e6611369"/>
		<link rel="canonical" href="https://ivanursul.com/" />
		<meta property="og:site_name" content="ivanursul">

				<meta property="og:type" content="website">
				<meta property="og:url" content="https://ivanursul.com" />
				<meta property="og:title" content="ivanursul" />
				<meta property="og:description" content="Software engineer. A fan of CI/CD. Blogger." />
		<link rel="canonical" href="https://ivanursul.com/" />
    <meta name="referrer" content="origin" />
    <link rel="next" href="https://ivanursul.com/page/2/" />
    
    <meta property="og:site_name" content="ivanursul" />
    <meta property="og:type" content="website" />
    <meta property="og:title" content="ivanursul" />
    <meta property="og:description" content="Software engineer. A fan of CI/CD. Blogger." />
    <meta property="og:url" content="https://ivanursul.com/" />
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content="ivanursul" />
    <meta name="twitter:description" content="Software engineer. A fan of CI/CD. Blogger." />
    <meta name="twitter:url" content="https://ivanursul.com/" />
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Website",
    "publisher": "ivanursul",
    "url": "https://ivanursul.com/",
    "description": "Software engineer. A fan of CI/CD. Blogger."
}
    </script>

    <meta name="generator" content="Ghost 0.8" />
    <link rel="alternate" type="application/rss+xml" title="ivanursul" href="https://ivanursul.com/rss/" />
    <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-58194390-1', 'auto');
  ga('send', 'pageview');

</script>
	</head>
	<body class="home-template">
<p class="header-text">
	<a href="http://ivanursul.com">blog</a>
	|
	<a href="http://ivanursul.com/cv">cv</a>
	|
	<a href="http://ivanursul.com/subscribe">subscribe</a>
	|
	<a href="http://ivanursul.com/cooperation">cooperation</a>
</p>
		<header class="row">
			
			<h1><a href="https://ivanursul.com"  alt="Blog Title">ivanursul</a></h1>

                        <p class="header-text blog-description">
				social: 
                                <a href="https://www.facebook.com/johnyursul">fb</a>
				|
				<a href="https://github.com/ivanursul">git</a>
				|
				<a href="http://stackoverflow.com/users/1446725/ivan-ursul?tab=profile">stack</a>
                                |
				<a href="https://www.upwork.com/freelancers/~01773bdc595f0cec47">up</a>
                                |
				<a href="https://www.linkedin.com/in/ivan-ursul-5a193449">in</a>
                                |
				<a href="https://twitter.com/ivanursul">tw</a>
				|
				<a href="https://www.instagram.com/joanursul/">insta</a>
                        </p>
			<p class="blog-description">Software engineer. A fan of CI/CD. Blogger.</p>
		</header>
		<section class="row" role="main">
	<article class="post">
		<header class="post-header">
			<h2 class="post-title"><a href="/microservices-interaction-apache-kafka/">Microservices interaction at scale using Apache Kafka</a></h2>
			<!--
			<p>Post by Ivan Ursul</p>
			-->
			<p class="post-time">
				<i class="fa fa-clock-o" aria-hidden="true"></i>
				<time datetime="2017-05-20">20 May 2017</time>
				&#160;
				<i class="fa fa-commenting" aria-hidden="true"></i>
				<a class="comment-count" href="/microservices-interaction-apache-kafka/#disqus_thread" 
				data-disqus-identifier='ghost-https://ivanursul.com/microservices-interaction-apache-kafka/'>Comments</a>
				&#160;
			</p>
		</header>
		<section class="post-excerpt">
			<p>Intro Why do people do microservices architecture?  Let's start with a review of a classical, old-school, n-tier application, which is often called a monolith:  Everyone worked with this types of applications, we were studying them in university, we did lot's of projects with this architecture and at first glance, it's a good architecture. We can immediately start doing systems on this architecture, they are perfectly simple and easy to implement.  But as such system becomes bigger, it starts receiving lots of different issues.  The first issue is about scalability, it doesn't scale well. If some part of such system will need to scale, then the overall system should be scaled. Since the system is divided into modules, it runs as one physical process and there's no option to scale one module. This can lead to expensive large instances, which you will have to maintain. The second issue is about engineers. Since it will become enormously big, you will have to hire a really big team for such system.  Evolution How can you address this issues? One of the ways you can evolve is to make a transition to a microservices architecture The way it works is that you have a&hellip;</p>
		</section>
	</article>
	<article class="post tag-java tag-concurrency">
		<header class="post-header">
			<h2 class="post-title"><a href="/concurrency-structures/">Concurrency structures written using core java</a></h2>
			<!--
			<p>Post by Ivan Ursul</p>
			-->
			<p class="post-time">
				<i class="fa fa-clock-o" aria-hidden="true"></i>
				<time datetime="2017-02-25">25 Feb 2017</time>
				&#160;
				<i class="fa fa-commenting" aria-hidden="true"></i>
				<a class="comment-count" href="/concurrency-structures/#disqus_thread" 
				data-disqus-identifier='ghost-https://ivanursul.com/concurrency-structures/'>Comments</a>
				&#160;
			</p>
			<p><i class="fa fa-tag"></i> <a href="/tag/java/">java</a>, <a href="/tag/concurrency/">concurrency</a></p>
		</header>
		<section class="post-excerpt">
			<p>Motivation The reason for writing this article is a lack of my understanding of Java concurrency. That's why I decided to create a post with some structures, which I wrote by myself. For sure, you may agree or disagree with me, I encourage to post your thoughts in comments so we can discuss them there.  List of structures Implemented:  Publish-Subscribe Queue Will implement them later: Fixed Thread Pool Cached Thread Pool CountDownLatch CyclicBarrier Phaser Semaphore Exchanger Rate Limiter Lock, ReentrantLock, ReentrantReadWriteLock ConcurrentHashMap AtomicInteger(For fun)  Publish/Subscribe What is Publish-Subscribe, in a nutshell? Obviously, there someone, who has something share something to others, and want to be sure, that everyone will receive this message. The idea of following structure is to have a publish-subscribe mechanism, which will act asynchronously, without usage of high-level classes from java.util.concurrent package: Consumer - entity, which will consume messages from main thread. PubSubModel - main thread, which will send messages to the consumers. Formally, you can treat it as a consumer. Code can be found here. Let's go over this code and try all the details: First of all, there will be one main thread, which will read lines from console and act&hellip;</p>
		</section>
	</article>
	<article class="post tag-mongodb tag-java tag-migrations">
		<header class="post-header">
			<h2 class="post-title"><a href="/database-migration-tools-for-mongo-db/">Database Migration tools for Mongo DB</a></h2>
			<!--
			<p>Post by Ivan Ursul</p>
			-->
			<p class="post-time">
				<i class="fa fa-clock-o" aria-hidden="true"></i>
				<time datetime="2017-02-06">06 Feb 2017</time>
				&#160;
				<i class="fa fa-commenting" aria-hidden="true"></i>
				<a class="comment-count" href="/database-migration-tools-for-mongo-db/#disqus_thread" 
				data-disqus-identifier='ghost-https://ivanursul.com/database-migration-tools-for-mongo-db/'>Comments</a>
				&#160;
			</p>
			<p><i class="fa fa-tag"></i> <a href="/tag/mongodb/">mongodb</a>, <a href="/tag/java/">java</a>, <a href="/tag/migrations/">migrations</a></p>
		</header>
		<section class="post-excerpt">
			<p>When it comes to the problem of migrating database structure, some of you may think about relational databases: there is a strict schema, and to remove something(field, table, index, etc.), you need to take action: execute an SQL statement. But when you work on schema-less databases, it may look like you don't need those migrations. But to be honest, are schema-less database are schemaless? In fact, you have more freedom in column and document-based database, but sooner or later you will have to modify some of the results of your work: remove the index, transform column format, etc. That's why with the help of this article I would like to review the available tools for Mongo migrations.  Mongobee If you use Spring in your project, then MongoBee should be the most suitable tool for you. The idea is that you write Java methods(changesets), which describe what changes need to be done. The method annotated by @ChangeSet is taken and applied to the database. Mongobee stores changesets history in dbchangelog collection. If you are a Spring guy, and like Java config among others, then you should choose this tool. You have two options how to run Mongobee - inside&hellip;</p>
		</section>
	</article>
	<article class="post tag-spring-boot tag-spring-framework tag-java">
		<header class="post-header">
			<h2 class="post-title"><a href="/how-to-map-spring-boot-properties-to-java-class/">How to map Spring Boot properties to Java class</a></h2>
			<!--
			<p>Post by Ivan Ursul</p>
			-->
			<p class="post-time">
				<i class="fa fa-clock-o" aria-hidden="true"></i>
				<time datetime="2017-01-02">02 Jan 2017</time>
				&#160;
				<i class="fa fa-commenting" aria-hidden="true"></i>
				<a class="comment-count" href="/how-to-map-spring-boot-properties-to-java-class/#disqus_thread" 
				data-disqus-identifier='ghost-https://ivanursul.com/how-to-map-spring-boot-properties-to-java-class/'>Comments</a>
				&#160;
			</p>
			<p><i class="fa fa-tag"></i> <a href="/tag/spring-boot/">spring boot</a>, <a href="/tag/spring-framework/">spring-framework</a>, <a href="/tag/java/">java</a></p>
		</header>
		<section class="post-excerpt">
			<p>Have you ever had a need to use some values from application.properties or **application.yml? How did you take them out? Personally, I always used @Value annotation:     @Value("${graphite.host}")     private String graphiteHost; It wasn't the best way to work with my properties. However, I didn't know a better approach. Then, I found @ConfigurationProperties - annotation from Boot package, which has everything you need to map your properties.   Given Let's say, your application.yml looks like following: graphite:     enabled: true   host: localhost   port: 2003   amountOfTimeBetweenPolls: 20000  When You need to create a bunch of classes, which you will be autowiring in all parts of your code. I'm using Project Lombok for skipping java formalities, if you are not, then create getters and setters for your classes.  package org.rngr.properties; import lombok.Data;   import org.springframework.boot.context.properties.ConfigurationProperties; import javax.validation.constraints.NotNull; @ConfigurationProperties(ignoreUnknownFields = true) @Data public class ApplicationProperties {     @NotNull     private GraphiteProperties graphite; } Pay attention to @ConfigurationProperties annotation, it's playing a key role here. Don't forget about subclass: package org.rngr.properties; import lombok.Data; @Data public class GraphiteProperties {     private boolean enabled;     private String host;     private int port;     private int amountOfTimeBetweenPolls; } In the end, you need&hellip;</p>
		</section>
	</article>
	<article class="post tag-java tag-slf4j tag-logback">
		<header class="post-header">
			<h2 class="post-title"><a href="/slf4j-mdc/">How to trace your logs using SLF4J MDC</a></h2>
			<!--
			<p>Post by Ivan Ursul</p>
			-->
			<p class="post-time">
				<i class="fa fa-clock-o" aria-hidden="true"></i>
				<time datetime="2016-12-17">17 Dec 2016</time>
				&#160;
				<i class="fa fa-commenting" aria-hidden="true"></i>
				<a class="comment-count" href="/slf4j-mdc/#disqus_thread" 
				data-disqus-identifier='ghost-https://ivanursul.com/slf4j-mdc/'>Comments</a>
				&#160;
			</p>
			<p><i class="fa fa-tag"></i> <a href="/tag/java/">java</a>, <a href="/tag/slf4j/">slf4j</a>, <a href="/tag/logback/">logback</a></p>
		</header>
		<section class="post-excerpt">
			<p>How do you use your logs for searching problem requests?  For instance, you got a problem response, with all headers, response body, and you need to find appropriate logs.  How would you do that? Personally, I found it useful to write some words about MDC - Mapped Diagnostic Context. Shortly, it is a concept of mapping request specific information.   Usage We will configure MDC in Spring Boot application. We will use SLF4J on top of Logback implementation. Using it all together, we will create a unique requestId for each request in our system.  Components We will use 4 components here: Spring Boot, Slf4j, Logback and Java Spring Boot Spring Boot will be used for managing dependency injection and registering pure Java Filter. Slf4j Simple Logging Facade is used for following abstraction principles. Additionally, MDC class is located inside slf4j dependency. Similar classes are inside log4j and logback dependencies. Logback Logback is used as one of logging providers Pure Java Java is used for writing simple Java Filter.  Affected files MDCFilter package org.startup.queue.filter; import org.slf4j.MDC;   import org.springframework.stereotype.Component; import javax.servlet.*;   import javax.servlet.http.HttpServletRequest;   import javax.servlet.http.HttpServletResponse;   import java.io.&hellip;</p>
		</section>
	</article>
</section>

<nav role="pagination">
	<p>
	<span class="page-number">Page 1 of 12</span>
	<a class="older-posts" href="/page/2/"><i class="fa fa-angle-double-right"></i></a>
	</p>
</nav>

		<p class="bottom-text">
			<a href="https://ivanursul.com">ivanursul</a> © 2016
		</p>
		<script id="dsq-count-scr" src="https://ivanursul.disqus.com/count.js?https" async></script>
	</body>
</html>
